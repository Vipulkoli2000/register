generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              String
  active            Boolean   @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  member   Member? @relation("UserMemberRelation")
  memberId Int? // This field still exists. If Member.userId is the true FK for the user, this might be redundant or for a different purpose.
  // Assuming Member.userId is the primary link to User for member-specific data.

  // Relation for ZoneRoleHistory
  zoneRoleHistoriesPerformed ZoneRoleHistory[] @relation("UserPerformedZoneRoleHistory")

  @@map("users")
}

model Zone {
  id        Int        @id @default(autoincrement())
  name      String
  active    Boolean    @default(true)
  locations Location[]
  chapters  Chapter[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relation to Zone Roles
  zoneRoles ZoneRole[]

  @@map("zones")
}

model Location {
  id        Int       @id @default(autoincrement())
  zone      Zone      @relation(fields: [zoneId], references: [id])
  zoneId    Int
  location  String
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("locations")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
 
  subCategory subCategory[]
 
  @@map("category")
}

model subCategory {
  id          Int      @id @default(autoincrement())
  name        String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) // Note: Consider @updatedAt

  @@map("subCategory")
}

model SiteSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

model Training {
  id            Int      @id @default(autoincrement())
  trainingDate  DateTime
  trainingTopic String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("trainings")
}

model State {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation to Member
  members     Member[]

  @@map("states")
}

model Message {
  id         Int      @id @default(autoincrement())
  heading    String   @db.VarChar(255)
  powerteam  String   @db.VarChar(100)
  message    String   @db.Text
  attachment String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chapter    Chapter? @relation(fields: [chapterId], references: [id])
  chapterId  Int?

  @@index([chapterId])

  @@map("messages")
}

model Chapter {
  id                 Int      @id @default(autoincrement())
  name               String
  zones              Zone     @relation(fields: [zoneId], references: [id])
  zoneId             Int
  location           Location @relation(fields: [locationId], references: [id])
  locationId         Int
  date               DateTime
  meetingday         String
  status             Boolean  @default(false)
  venue              String
  bankopeningbalance Decimal? @db.Decimal(10, 2)
  bankclosingbalance Decimal? @db.Decimal(10, 2)
  cashopeningbalance Decimal? @db.Decimal(10, 2)
  cashclosingbalance Decimal? @db.Decimal(10, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  members      Member[]
  packages     Package[] // Added relation to Package model
  meetings     ChapterMeeting[] // Relation to ChapterMeeting model
  visitors     Visitor[]        @relation("VisitorHomeChapter") // Relation to Visitor model
  transactions Transaction[] // Added relation to Transaction model
  references   Reference[] // Added relation to Reference model
  oneToOnes    OneToOne[] // Relation to OneToOne model
  messages     Message[] // Relation to Message model
  chapterRoles ChapterRole[] // Relation to chapter roles
  thankYouSlips ThankYouSlip[] // Relation to thank you slips


  @@map("chapters")
}

model Member {
  id                      Int      @id @default(autoincrement())
  memberName              String
  chapterId               Int?
  chapter                 Chapter? @relation(fields: [chapterId], references: [id])
  stateId                 Int?
  state                   State?   @relation(fields: [stateId], references: [id])
  chapterRoles            ChapterRole[]
  category                String
  businessCategory        String
  gender                  String
  dateOfBirth             DateTime
  mobile1                 String
  mobile2                 String?
  gstNo                   String?
  organizationName        String
  businessTagline         String?
  organizationMobileNo    String
  organizationLandlineNo  String?
  organizationEmail       String?
  orgAddressLine1         String
  orgAddressLine2         String?
  orgLocation             String
  orgPincode              String
  organizationWebsite     String?  @db.Text
  organizationDescription String?  @db.Text

  addressLine1    String
  location        String
  addressLine2    String?
  pincode         String
  hoExpiryDate    DateTime?
  venueExpiryDate DateTime?

  specificAsk  String? @db.Text
  specificGive String? @db.Text
  clients      String? @db.Text

  profilePicture1 String?
  profilePicture2 String?
  profilePicture3 String?
  email           String  @unique
  password        String

  users  User? @relation("UserMemberRelation", fields: [userId], references: [id])
  userId Int?  @unique

  memberships        Membership[]
  requirements       Requirement[]
  invitedVisitors    Visitor[]
  meetingAttendances MeetingAttendance[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  givenReferences     Reference[] @relation("GivenReferences")
  receivedReferences  Reference[] @relation("ReceivedReferences")
  requestedOneToOnes  OneToOne[]  @relation("RequestedOneToOnes")
  receivedOneToOnes   OneToOne[]  @relation("ReceivedOneToOnes")
  
  // Thank You Slips sent by this member
  sentThankYouSlips   ThankYouSlip[]

  // Relation to Zone Roles
  zoneRoles ZoneRole[]

  @@map("members")
}

model Package {
  id           Int      @id @default(autoincrement())
  packageName  String
  periodMonths Int // Period in months: 1, 3, 6, 12
  isVenueFee   Boolean  @default(false)
  chapterId    Int?
  chapter      Chapter? @relation(fields: [chapterId], references: [id])
  basicFees    Decimal  @db.Decimal(10, 2)
  gstRate      Decimal  @db.Decimal(5, 2)
  gstAmount    Decimal  @db.Decimal(10, 2) // Calculated based on rate and basic fees
  totalFees    Decimal  @db.Decimal(10, 2) // basic + gst

  memberships Membership[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

model Membership {
  id            Int      @id @default(autoincrement())
  memberId      Int
  member        Member   @relation(fields: [memberId], references: [id])
  invoiceNumber String   @unique
  invoiceDate   DateTime

  packageId        Int
  package          Package  @relation(fields: [packageId], references: [id])
  packageStartDate DateTime
  packageEndDate   DateTime

  basicFees Decimal @db.Decimal(10, 2)

  cgstRate   Decimal? @db.Decimal(5, 2)
  cgstAmount Decimal? @db.Decimal(10, 2)

  sgstRate   Decimal? @db.Decimal(5, 2)
  sgstAmount Decimal? @db.Decimal(10, 2)

  igstRate   Decimal? @db.Decimal(5, 2)
  igstAmount Decimal? @db.Decimal(10, 2)

  totalTax    Decimal? @db.Decimal(10, 2)
  totalAmount Decimal? @db.Decimal(10, 2)
  totalFees   Decimal  @db.Decimal(10, 2)

  paymentDate DateTime?
  paymentMode String?

  // Payment method specific fields
  chequeNumber String?
  chequeDate   DateTime?
  bankName     String?
  neftNumber   String?
  utrNumber    String?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("memberships")
}

model ChapterMeeting {
  id           Int      @id @default(autoincrement())
  date         DateTime
  meetingTime  String
  meetingTitle String
  meetingVenue String

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int

  visitors    Visitor[]
  attendances MeetingAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapter_meetings")
}

model Visitor {
  id             Int       @id @default(autoincrement())
  // Basic Details
  name           String
  email          String?
  gender         String
  dateOfBirth    DateTime?
  mobile1        String
  mobile2        String?
  isCrossChapter Boolean   @default(false)

  // Chapter & Meeting Information
  meeting   ChapterMeeting @relation(fields: [meetingId], references: [id])
  meetingId Int

  homeChapter Chapter? @relation(name: "VisitorHomeChapter", fields: [chapterId], references: [id])
  chapterId   Int? // Home chapter for cross-chapter visitors
  chapter     String // Chapter name for non-members

  invitedById     Int?
  invitedByMember Member? @relation(fields: [invitedById], references: [id])

  // Business Details
  category        String?
  businessDetails String? @db.Text

  // Address Details
  addressLine1 String?
  addressLine2 String?
  city         String?
  pincode      String?

  // Status
  status String? // e.g., "Invited", "Confirmed", "Attended", "No-Show"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visitors")
}

model MeetingAttendance {
  id Int @id @default(autoincrement())

  meeting   ChapterMeeting @relation(fields: [meetingId], references: [id])
  meetingId Int

  member   Member @relation(fields: [memberId], references: [id])
  memberId Int

  isPresent Boolean @default(false)
  isSubstitute Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, memberId])
  @@map("meeting_attendances")
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  chapterId          Int
  chapter            Chapter  @relation(fields: [chapterId], references: [id])
  date               DateTime
  accountType        String // 'cash' or 'bank'
  transactionType    String // 'credit' or 'debit'
  amount             Decimal  @db.Decimal(10, 2)
  transactionHead    String?
  narration          String?  @db.Text
  transactionDetails String?  @db.Text
  description        String?
  reference          String?
  hasInvoice         Boolean  @default(false)
  gstRate            Decimal? @db.Decimal(5, 2)
  gstAmount          Decimal? @db.Decimal(10, 2)
  invoiceNumber      String?
  partyName          String?
  partyGSTNo         String?
  partyAddress       String?
  invoiceImage       String? // Path to the uploaded invoice image
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("transactions")
}

model Requirement {
  id          Int      @id @default(autoincrement())
  member      Member   @relation(fields: [memberId], references: [id])
  memberId    Int
  heading     String
  requirement String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("requirements")
}

model Reference {
  id             Int      @id @default(autoincrement())
  date           DateTime
  noOfReferences Int?
  chapterId      Int
  chapter        Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Member relationships
  giverId    Int
  receiverId Int
  giver      Member @relation(name: "GivenReferences", fields: [giverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver   Member @relation(name: "ReceivedReferences", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  urgency String?
  self    Boolean @default(false)

  // Reference details
  nameOfReferral String
  mobile1        String
  mobile2        String?
  email          String?
  remarks        String? @db.Text

  // Address details
  addressLine1 String?
  location     String?
  addressLine2 String?
  pincode      String?

  // Status tracking
  status String @default("pending") // pending, contacted, converted, rejected

  // Status history
  statusHistory ReferenceStatusHistory[]
  
  // Thank you slips
  thankYouSlips ThankYouSlip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("references")
}

model ReferenceStatusHistory {
  id          Int      @id @default(autoincrement())
  date        DateTime
  status      String
  comment     String?  @db.Text
  
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referenceId Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reference_status_history")
}

model OneToOne {
  id          Int      @id @default(autoincrement())
  date        DateTime
  
  // Member relationships
  requesterId Int
  requestedId Int
  requester   Member @relation(name: "RequestedOneToOnes", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requested   Member @relation(name: "ReceivedOneToOnes", fields: [requestedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Chapter relationship
  chapterId   Int
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  remarks     String? @db.Text
  status      String  @default("pending") // pending, accepted, completed, cancelled
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("one_to_ones")
 }

model ChapterRole {
  id        Int      @id @default(autoincrement())
  roleType  String   // 'chapterHead', 'secretary', 'treasurer', 'guardian', 'districtCoordinator', 'regionalCoordinator'
  
  // Member relationship
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Chapter relationship
  chapterId Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // History relationship
  history   ChapterRoleHistory[] // Relation to role history
  
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([chapterId, roleType])
  @@map("chapter_roles")
}

model ChapterRoleHistory {
  id        Int      @id @default(autoincrement())
  
  // Related role
  roleId    Int
  role      ChapterRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Member who held the role
  memberId  Int
  
  // Action performed (assigned, removed)
  action    String
  
  // User who made the change
  performedById Int? // ID of the user who made the change
  performedByName String? // Name of the user who made the change (in case user record is deleted)
  
  // Chapter information for easier querying
  chapterId Int
  roleType  String
  
  // Timestamps
  startDate DateTime @default(now()) // When this record became active
  endDate   DateTime? // When this record was replaced (null if current)
  
  @@map("chapter_role_history")
}

model ThankYouSlip {
  id          Int      @id @default(autoincrement())
  date        DateTime
  
  // Reference relationship (optional for direct thank you slips)
  referenceId Int?
  reference   Reference? @relation(fields: [referenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Chapter relationship
  chapterId   Int
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Member who created this thank you slip (optional for backward compatibility)
  fromMemberId Int?
  fromMember   Member? @relation(fields: [fromMemberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  // Member who received this thank you slip (optional for backward compatibility)
  toWhomId    Int?
  
  // Details
  toWhom      String
  amount      String
  narration   String   @db.Text
  testimony   String   @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("thank_you_slips")
}

model Statistics {
  id                Int       @id @default(autoincrement())
  businessGenerated Decimal
  referenceShared   Int
  totalVisitors     Int
  date              DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("statistics")
}
model ZoneRole {
  id        Int      @id @default(autoincrement())
  roleType  String   // "Regional Director", "Joint Secretary"

  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  zoneId    Int
  zone      Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  history   ZoneRoleHistory[] // Relation to role history

  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([zoneId, roleType]) // Ensures a role type is unique per zone
  @@map("zone_roles")
}

model ZoneRoleHistory {
  id        Int      @id @default(autoincrement())

  roleId    Int
  role      ZoneRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Denormalized fields for historical record integrity
  memberId  Int      // Member who held the role
  zoneId    Int      // Zone where role was held
  roleType  String   // Type of role

  action    String   // e.g., "assigned", "removed", "replaced"

  // User who made the change
  performedById   Int?   // ID of the user who made the change (links to User model)
  performedBy     User?  @relation("UserPerformedZoneRoleHistory", fields: [performedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  performedByName String? // Name of the user (backup in case User record is modified/deleted)

  startDate DateTime @default(now()) // When this history record became active (role assigned/changed)
  endDate   DateTime?             // When this role assignment ended (null if current)

  @@map("zone_role_history")
}
